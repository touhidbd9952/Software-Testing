What is Cucumber:

Ghockin: It is business readable domain specific language that describle software behaviour

Cucumber Keywords:
	Scenario:  	          Every testcase is a scenario
	Feature: 	           All testcase
	Feature file:         testcase file (something.feature)
	Scenario outline:  Positive/Negative test
	Step Definition:    1. Given ....  When .... And ... And ... Then ....    (Positive Test)
		             2. Given .... When .... And ... Then ... But ....    (Negative Test)

		            	Given First Step
			When Scond Step
			And Third Step
			Then Result

			or 

			Given First Step
			When Scond Step
			And Third Step
			Then  if something is wrong
			But show error


Step-1
-------
in "SubmitOrder.Feature" file write below 
-----------------------------
@tag
Feature: Purchase the order from Ecommerce Website
   I want to use this template for my feature file

   Background:
   Given I landed on Eceommerce Page

    @tag2
    Scenario Outline: Positive Test of Submitting the order

         	Given Logged in with username <name> and password <password>
	When I add product <productName> to Cart
	And Checkout <productName> and submit the order
	Then "THANK YOU FOR THE ORDER" message is displayed on ConfirmationPage

	Examples:
	     |   name		|   password	|  productName     |
	     |   abc@gmail.com |   abc123		|  ZARA COAT 3  |


in "StepDefinitionImpl.java"
----------------------------------
public class StepDefinitionImpl extends BaseTest
{
    	public LandingPage landingPage;
	public ProductCatalogue productCatalogue;

	@Given(“I landed on Ecommerce Page”)
	public void I_landed_on_Ecommerce_Page() 
	{
		landingPage = launchApplication();
	}
	@Given(“^Logged in with username (.+) and password (.+)$”)
	public void I_landed_on_Ecommerce_Page() 
	{
		productCatalogue = landingPage.loginApplication(username, password);
	}
}

@when(“^I add product (.+) to Cart$”)
public void i_add_product_to_cart(String productName)
{
	List<WebElement> products = productCatalogue.getProductList();
	productCatalogue.addProductToCart(productName);
}
@When(“^Checkout (.+) and submit the order$”)
public void checkout_submit_order(String productName)
{
	CartPage cartPage = productCatalogue.goToCartPage();
	
	Boolean match = cartPage.verifyProductDisplay(productName);
	Assert.assertTrue(match);
	CheckoutPage checkoutPage = cartPage.goToCheckout();
	checkoutPage.selectCountry(“india”);
	confirmationPage = checkoutPage.submitOrder();
}
@Then(“{string} message is displayed on confirmationPage”)
public void message_displayed_confirmationPage(String string)
{
	String confirmMessage = confirmationPage.getconfirmationMessage(); 
	Assert.assertTrue(confirmMessage.equalsIgnoreCase(string));
}



