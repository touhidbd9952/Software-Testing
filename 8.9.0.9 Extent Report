/////////////How to create Extent Report //////////////////////////////////////////////////////////////////////////////////
//Step-1:  add library in pom.xml

<!-- https://mvn repository.com/artifact/com.aventstack/extent reports <dependency>-->
<dependency>
<groupId>com.aventstack</groupId>
<artifactId>extent reports</artifactId> <version>5.0.9</version>
</dependency>

//Step-2: create a class "ExtentReportDemo" in "src/test/java"

public class ExtentReportDemo
{
    ExtentReports extent;
    
    @BeforeTest
    public void config()
    {
        // ExtentReports, Extent SparkReporter
        String path =System.getProperty("user.dir")+"\\reports\\index.html"; 
        ExtentSparkReporter reporter = new ExtentSparkReporter (path); 
        reporter.config().setReportName("Web Automation Results"); 
        reporter.config().setDocumentTitle("Test Results");
        extent =new ExtentReports(); 
        extent.attachReporter (reporter);
        extent.setSystemInfo("Tester", "Rahul Shetty");
    }

    @Test
    public void initialDemo()
    {
        extent.createTest("Initial Demo");
        System.setProperty("webdriver.chrome.driver", "C://chromedriver.exe"); 
        WebDriver driver =new ChromeDriver(); 
        driver.get("https://rahulshettyacademy.com"); 
        System.out.println(driver.getTitle()); I
        extent.flush();  //to close extent report operation
    }

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////

//Step-1/////////////////////////////////

public class ExtentReporterNG {
public static ExtentReports getReportObject()
{
    String path =System.getProperty("user.dir")+"//reports//index.html"; 
   ExtentSparkReporter   reporter  =  new  ExtentSparkReporter (path); 
   reporter.config().setReportName("Web Automation Results"); 
   reporter.config().setDocumentTitle("Test Results");

   ExtentReports  extent = new ExtentReports();
   extent.attachReporter (reporter);
   extent.setSystemInfo("Tester", "Rahul Shetty");
   return extent;
}

//Step-2/////////////////////////////////

public class Listeners implements ITestListener
{
   ExtentTest test;
   ExtentReports extent = ExtentReporterNG.getReportObject(); 
   WebDriver driver;
   ThreadLocal<ExtentTest> extentTest = new ThreadLocal<ExtentTest>();    //help in parallel testing

   @Override
   public void onTestStart (ITestResult result) 
   {
      test = extent.createTest(result.getMethod().getMethodName());       //1
      extentTest.set(test); 
   }

   @Override
   public void onTestSuccess (ITestResult result) 
   { 
      extentTest.get().log(Status. PASS, "Test Passed");    //2   extentTest.get() return test
   }

   @Override
   public void onTestFailure (ITestResult result) 
   { 
      extentTest.get().fail(result.getThrowable());       //3
      driver = (WebDriver) result.getTestClass().getRealClass().getField("driver").get(result.getInstance());
      String filePath = null;
      filePath = getScreenshot (result.getMethod().getMethodName(), driver);
      extentTest.get().addScreenCaptureFromPath(filePath, result.getMethod().getMethodName());
   }

   @Override
    public void onFinish (ITestContext context) 
   { 
      extent.flush();   //4
   }
}

//Step-3: add listeners in pom.xml/////////////////////////////////

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd"> 

<suite parallel = "tests" name="Suite">

<listeners>
  <listener class-name="rahulshettyacademy. TestComponents. Listeners"/> 
</listeners>

<test thread-count="5" name="Submit Order Test">
<classes>
  <class name="rahulshettyacademy.tests. SubmitOrderTest"/> 
</classes>
</test> 

<test thread-count="5" name="Error Validations Test">
<classes>
   <class name="rahulshettyacademy.tests. ErrorValidationsTest"/> 
</classes>
</test> 

</suite> 


///Step-4://////////////////////////////////////////////////

public String getScreenshot (String testCaseName, WebDriver driver) throws IOException
{
    TakesScreenshot ts = (TakesScreenshot) driver;
    File source = ts.getScreenshotAs(OutputType.FILE);
    File file = new File(System.getProperty("user.dir") + "//reports//" + testCaseName + ".png"); 
    FileUtils.copyFile(source, file);  //source, destination
    return System.getProperty("user.dir") + "//reports//" + testCaseName + ".png";
}



/////////// How to retest a testcase ////////////////////////////////////////////////////////////////
1. create a class "Retry" and impliments it by "IRetryAnalyzer"

package rahulshettyacademy.TestComponents;
import org.testng. IRetryAnalyzer;
import org.testng.ITestResult;

public class Retry implements IRetryAnalyzer 
{
	int count = 0;
	int maxTry=1;
	@Override
	public boolean retry (ITestResult result) 
	{
		if (count < maxTry)
		{
           count++;
		   return true;
		}
		return false;

	}
}


2. call "Retry" in "Listeners" class

@Test(groups= {"ErrorHandling"}, retryAnalyzer=Retry.class)











