Why we use Steam?
By using steam, we can write "Multiple line operation" in a "single line".
------------------------------------------------------
stream() : make an array --> comma separated one string/collection
filter(item->operation_on_item) : after making main collection, we can create another collection 
	from main collection by condition. filter method has two part, 1. item, 2. operation_on_item
	filter method return a new collection base on condition.
count(): count the element inside the collection
forEach(): we can apply foreach operation on collection

////////////// Example 1 /////////////////////////////////////////////////////////////
ArrayList<String> names = new ArrayList<String>();
		names.add(“Karim”);
		names.add(“Rarim”);
		names.add(“Monir”);
		names.add(“Kumar”);
		names.add(“Habib”);
		int count=0;
		for(int i=0;i<names.size();i++)
		{
		  If(names.get(i).startWith("A"))
		 {
		   count ++;
		 }
		}
		System.out.println(count);

		        ||
		        ||
		        \/
		ArrayList<String> names = new ArrayList<String>();
		names.add(“Karim”);
		names.add(“Rarim”);
		names.add(“Monir”);
		names.add(“Kumar”);
		names.add(“Habib”);
		int count = names.stream().filter(s->s.startWith("A")).count();     //list  convert to stream filter(landa operation)some-function()
		System.out.println(count);
    
    		//apply foreach operation on new collection
		names.stream().filter(s->s.length()==5).forEach(s->System.out.println(s));
		
		//convert to upper case
		names.stream().filter(n->n.startsWith("a")).sorted().map(n->n.toUpperCase()).forEach(n->System.out.println(n));
		
		//convert array to array list
		List<String> names1 = Arrays.asList("Karim","Rahim","monir","Rana","abir");
		
		//concatinating two or more stream to one stream
		Stream names2 = Stream.concat(names.stream(), names1.stream());
		names2.forEach(n->System.out.println(n));


//////////////// Example 2 //////////////////////////////////////////////////////////////////////////////////////
use stream() on datatable
-------------------------
Instruction:
1. click on column(product title) of table
2. take all record of (product title) column in a list "productTitle"
3. take text from "productTitle" list and create a new list "productTitleText"
4. sort on "productTitleText" list and create a new list "productTitleTextSorted"
5. compare "productTitleText" list with "productTitleTextSorted" list



public static void main(String[] args) throws MalformedURLException, IOException {

		System.setProperty("webdriver.chrome.driver", "C://chromedriver.exe");

		WebDriver driver = new ChromeDriver();

		driver.get("https://rahulshettyacademy.com/greenkart/#/offers");
		
		

		// Step-1: click on column of datatable

		driver.findElement(By.xpath("//tr/th[1]")).click();

		// Step-2: capture all data of first column into list

		List<WebElement> elementsList = driver.findElements(By.xpath("//tr/td[1]"));

		// Step-3: capture text of all data (first column) into new(original) list

		List<String> originalList = elementsList.stream().map(s -> s.getText()).collect(Collectors.toList());

		// Step-4: sort on the original list of step 3  and make a list (sortedlist)

		List<String> sortedList = originalList.stream().sorted().collect(Collectors.toList());

		// Step-5: compare original_list vs sorted_list

		Assert.assertTrue(originalList.equals(sortedList));
		
		
		
		///// Task 2: scan the name column with getText, if "Rice", print the price of the "Rice"///////////

		List<String> price;

		do
		{
			List<WebElement> rows = driver.findElements(By.xpath("//tr/td[1]"));

			price = rows.stream().filter(s -> s.getText().contains("Rice"))

					.map(s -> getPriceVeggie(s)).collect(Collectors.toList());

			price.forEach(a -> System.out.println(a));

			if (price.size() < 1)
			{
			   driver.findElement(By.cssSelector("[aria-label='Next']")).click();
			}

		} while (price.size() < 1);
	}

	private static String getPriceVeggie(WebElement s) 
	{
		String pricevalue = s.findElement(By.xpath("following-sibling::td[1]")).getText();

		return pricevalue;
	}
	
	
	
	
	
	
	
	
	
	








		
		
		
		
		
		
		
		
    
    
    
    
    
    
    
