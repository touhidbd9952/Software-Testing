TestNG Tags-Complete List

Annotation Sequence 				Description
-----------------------------------------------------------------------------------------------
@BeforeSuite				|	One time execute. if exist, it execute before all test. use for browser setup.
    @BeforeTest				|	Execute before Test, if exist
        @BeforeGroups			|	Execute before Group Test, if exist
            @BeforeClass		|	Execute before Class
                @BeforeMethod		|	Execute before Method
                        @Test		|	Test Method
                         @DataProvider	|	Use for to provide test data
                 @AfterMethod		|	Execute after Method
             @AfterClass		|	Execute after Class
         @AfterGroups			|	Execute after Group Test,
    @AfterTest				|	Execute after Test, if exist
@AfterSuite				|	One time execute. if exist, it execute after all test




@Test        : to write general test case. On the base of method alphabetic order (a,b,c....z), textng execute test case.
@BeforeTest  :  execute first than any other test case. High Prority. Use to open the connection, to delete all data before insert test.
@AfterTest   : execute last of all test case. Use to close the connection, ….
@BeforeSuite : execute before all test execution. Use to set environment before test execution
@AfterSuite  : execute after all test execution. Use to close all the things that used to execute test cases.
@BeforeMethod : before each of method, it each execute first then one method execute after            
                then @BeforeMethod execute. In this way if a class have 5 method. Before 
                execute any method @Before method execute first. Can be use to delete all the  
                cookies before start next execution. 
                
                a.	@BeforeMethod execute, 1 number method execute
                b.	@BeforeMethod execute, 2 number method execute
                .
                .
                
@AfterMethod : after each of method, it execute then 2nd method execute after then    
               @AfterMethod execute. In this way if a class have 5 method. 
               
                a.	1 number method execute, @AfterMethod execute
                b.	2 number method execute, @ AfterMethod execute
                .
                .

@BeforeClass : before particular class tests execute, it execute.
@AfterClass  : after particular class tests execute, it execute
@Test(groups={"smoke"}) : this test case is only for "smoke" test purpose. First we need to select all the method that are use 
                          for smoke test and write "@Test(groups={“smoke”})" before this methods.
@Test(dependsOnMethods={"method_name1"}) : before execute current method, first execute “method_name”. 
					  before execute current method, first execute "method_name1","method_name2"
					  @Test(dependsOnMethods={"method_name1","method_name2"})

@Test(enable=false) : use to scrept/ignore/deactive particular test case
@Test(enable=true) : use to active particular test case

@Test(timeOut=4000) : it idicate the testng, please wait maximum 40 second if needed to execute this test case. fail it if need more 
                       than 40 second to execute it.

@DataProvider : use to execute certain test case method (test11) on the base of provider data (3-row 2-column : 3 itme execute and each time provide 2 (username,pass)parameter). 

		@Test(dataProvider="getData")
		public void test11(String username, String pass)
		{
			System.out.println(username);
			System.out.println(pass);
		}

		@DataProvider
		public Object[][] getData()
		{
			Object[][] data = new Object[3][2];  //3-row 2-column
			data[0][0] = "username1";
			data[0][1] = "pass1";

			data[1][0] = "username2";
			data[1][1] = "pass2";

			data[2][0] = "username3";
			data[2][1] = "pass3";

			return data;
		}
		
		or
		
		@DataProvider
		public Object[][] getData()
		{
			return new Object[][] {{"abc1@gmail.com","pass1"},{"abc2@gmail.com","pass2"},{"abc3@gmail.com","pass3"}};  //3-row 2-column
		}
		
		@DataProvider                    //Data provide by HashMap
		public Object[][] getData()
		{
			HashMap<String, String> map = new HashMap<String, String>();
			map.put("email","karim@gmail.com");
			map.put("password", "abc123");
			map.put("product", "ZARA COAT 3");

			HashMap<String, String> map1 = new HashMap<String, String>();
			map.put("email","rarim@gmail.com");
			map.put("password", "abc124");
			map.put("product", "ADIDAS ORIGINAL");

			return new Object[][] {{map},{map1}};
		}
		||
		|| Use in below way
		\/
	String productName = "ZARA COAT 3";
	@Test(dataProvider="getData")
	public void submitOrder (HashMap<String, String> input)
		ProductCatalogue productCatalogue landingPage.loginApplication (input.get("email"), input.get("password") List<WebElement> products = productCatalogue.getProductList(); productCatalogue.addProductToCart(input.get("product"));
		CartPage cartPage = productCatalogue.goToCartPage();
		Boolean match = cartPage.VerifyProductDisplay (productName); Assert.assertTrue(match);
		CheckoutPage checkout Page cartPage.goToCheckout(); checkoutPage.selectCountry("india");
		ConfirmationPage confirmationPage = checkoutPage.submitOrder();
		String confirmMessage confirmationPage.getConfirmationMessage();
		Assert.assertTrue(confirmMessage.equalsIgnoreCase("THANKYOU FOR THE ORDER."));
	}



//////////Example of TestNG Class/////////////////////////////////////////////////

package testNGtutorial;

import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class FirstTest {
	@Test
	public void test1()
	{
		System.out.println("Hello");
	}
	@BeforeTest
	public void test2()
	{
		System.out.println("I am Before Test");
	}
	@AfterTest
	public void test3()
	{
		System.out.println("I am After Test");
	}
	@BeforeClass
	public void test4()
	{
		System.out.println("I execute before my class test cases");
	}
	@AfterClass
	public void test5()
	{
		System.out.println("I execute after my class test cases");
	}
	@BeforeMethod
	public void test6()
	{
		System.out.println("I execute first before my class all test cases methods");
	}
	@AfterMethod
	public void test7()
	{
		System.out.println("After my class all test cases methods, I execute");
	}
	@BeforeSuite
	public void test8()
	{
		System.out.println("I execute before all Suite");
	}
	@AfterSuite
	public void test9()
	{
		System.out.println("I execute after all Suite");
	}
	
	
	@Test(groups={"smoke"})
	public void test10()
	{
		System.out.println("I execute only for smoke tesing");
	}
	@Test(groups={"smoke"})
	public void test11()
	{
		System.out.println("I execute only for smoke tesing");
	}
	
	@Test(dependsOnMethods={"test9"})
	public void test11()
	{
		System.out.println("I execute after 'test9' method");
	}
}


///////////in testNG.xml///////////////////////////////////////////////////////////////////////

include : only execute this test case
exclude : execute all test cases but accept this
-------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test name="Test1">
    <classes>
    <!--///all the method of FirstTest is is inactive but test1-->
      <class name="testNGtutorial.FirstTest">   
      <methods>
      <include name="test1"></include>
      </methods>
      </class>  
    </classes>
  </test> 
  <test name="Test2">
    <classes>
      <!--///all the method of SecondTest that start with "saySome" will be inactive (use methodpartialname.*)-->
      <class name="testNGtutorial.SecondTest">
      <methods>
      <exclude name="saySome.*"/>
      </methods>
      </class>
    </classes>
  </test>
</suite> 


Execute only this package
-------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test name="Test1">
    <packages>
    <package name="testNGtutorial"/>
    </packages>
  </test> 
  
</suite> 


Generally execute all test cases
--------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test name="Test1">
    <classes>
      <class name="testNGtutorial.FirstTest"/>
      <class name="testNGtutorial.SecondTest"/>   
    </classes>
  </test> 
</suite>


Group execute, only for "smoke" testing
--------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">

<suite name="Suite">

  <test name="Test1">
  <!-- Run all the test cases of smoke group -->
    <groups>
    <run>
    <include name="smoke"/>
    </run>
    </groups>
    <classes>
      <class name="testNGtutorial.FirstTest"/>     
    </classes>
  </test> 
  
</suite> 



/////////////////Description in short/////////////////////////////////////////////////
Testng Anotation can be used in Testng Class
@Test : I will call generally
@BeforeMethod : I will call before every method in this class
@AfterMethod : I will call after every method in this class
@BeforeClass : I will call before this class call
@AfterClass : I will call after this class call
@BeforeTest :I will call before this test call
@AfterTest : I will call after this test call
@BeforeSuite : I will call before this group of test call
@AfterSuite : I will call after this group of test call
@DataProvider : I will call when I provide data










