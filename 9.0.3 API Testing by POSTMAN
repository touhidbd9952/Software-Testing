POSTMAN Tutorial
-----------------------
Postman is an API platform for building and using APIs. 
API testing helping site: reqres.in   (Search: Api script examples)


Download "Postman" in PC
-----------------------
1. Open browser and type "Postman download"
2. Select stable version and download
3. Install


Create Workspace
-----------------------
1. From "Workspace" menu click on "New Workspace"
	a. Give Workspace Name as "My Workspace"
	b. Click on "Create Workspace" button

Create Collection (folder)
-----------------------
1. Select your Workspace and right click on it 
2. Click on "Create Collection" button
3. Give the collection name "SQAStudy"

Request List
-----------------------
GET 	: GET method is used to retrieve information from the given server using a given URL.
POST	: POST method is used to insert data.
PUT	: PUT method is used to update data.
PATCH	: PATCH method is used to partial update data.
HEAD	: HEAD method is like GET method but without the response body. HEAD transfers the status line and the header section only.
DELETE	: DELETE method is used to delete data


GET Method (Retrive Data)
-----------------------
1. Select your "Collection Name" and right click on it
2. Select "Add request"
3. Create Name your request "GET All Data"
4. Set "GET" as request type
5. Set "API Url" in Text box (beside "GET") as "https://abc.com/booking"
6. Click on "Send" button

POST Method (Insert data)
-----------------------
1. Select your "Collection Name" and right click on it
2. Select "Add request"
3. Create Name your request "Insert Data"
4. Set "POST" as request type
5. Set "API Url" in Text box (beside "POST") as "https://abc.com/booking"
6. Click on "Body" --> "raw" (select) --> JSON (select)
	in "raw", type below way json data

	{
	   "firstname": "Mohoshi",
	   "lastname": "Haque",
	   "totalprice": 851,
	    "depositpaid": false,
	   "bookingdates": {
	  	"checkin": "2020-06-05",
		"checkout": "2022-01-16"
	  }
	}
7. Click on "Send" button

PUT Method (Update data)
-----------------------
1. Select your "Collection Name" and right click on it
2. Select "Add request"
3. Create Name your request "Update Data"
4. Set "PUT" as request type
5. Set "API Url" in Text box (beside "PUT") as "https://abc.com/booking/{{id}}"
6. Click on "Body" --> "raw" (select) --> JSON (select)
	in "raw", type below way json data

	{
	   "firstname": "Mohoshin",
	   "lastname": "Haque",
	   "totalprice": 851,
	    "depositpaid": false,
	   "bookingdates": {
	  	"checkin": "2020-06-05",
		"checkout": "2022-01-16"
	  }
	}
7. Click on "Send" button


PATCH Method (Update data partially)
-----------------------
1. Select your "Collection Name" and right click on it
2. Select "Add request"
3. Create Name your request "Update Data Partially"
4. Set "PATCH" as request type
5. Set "API Url" in Text box (beside "PATCH") as "https://abc.com/booking/{{id}}"
6. Click on "Body" --> "raw" (select) --> JSON (select)
	in "raw", type below way json data

	{
	   "lastname": "Rana",
	}
7. Click on "Send" button


DELETE Method (Delete data)
-----------------------
1. Select your "Collection Name" and right click on it
2. Select "Add request"
3. Create Name your request "Delete Data"
4. Set "DELETE" as request type
5. Set "API Url" in Text box (beside "DELETE") as "https://abc.com/booking/{{CustomerId}}"
7. Click on "Send" button


---------------------------------------------------------------------

//////How to Create "Environment" Variable/////////////////////////

1. Select your "Collection Name" and click on it "Environment"
2. Chanage the name as "CollectionNameEnvironment"
3. Create a Variable 
	VARIABLE	|	INITIAL VALUE	|	CURRENT VALUE
        --------------------------------------------------------------------------------------------------------------------
                   BaseUrl		|	https://abc.com	|	https://abc.com
        --------------------------------------------------------------------------------------------------------------------
	 CustomerId	|	1		|
        --------------------------------------------------------------------------------------------------------------------
        	 Token		|                	abcd		|

4. Save
5. Now you can change "API Url" like as   {{BaseUrl}}/booking                  



//////How to Set value to "id" Environment Variable/////////////////////////

when insert data, follow below steps

1. click on "Body" --> click on "Tests/Script" and type below code

	var jsonData = pm.response.json()                                            // pm = postman
	pm.environment.set("CustomerId", jsonData.bookingid)            // "bookingid"


//////How to Set value to "Token" Environment Variable/////////////////////////

when  login by username and password, follow below steps
1. Select your "Collection Name" and right click on it
2. Select "Add request"
3. Create Name your request "POST Authentication"
4. Set "POST" as request type
5. Set "API Url" in Text box (beside "POST") as "https://abc.com/auth"
6. Click on "Body" --> "raw" (select) --> JSON (select)
	in "raw", type below way json data

	{
	   "username": "admin",
	   "password": "password123"
	}

7. Click on "Send" button

1. click on "Body" --> click on "Tests/Script" and type below code

	var jsonData = pm.response.json()                                            // pm = postman
	pm.environment.set("Token", jsonData.token)                           // get "token"



//////How to Set Authentication for Update and Delete  /////////////////////////

1. open "Update Data" API request
2. click on "Headers" and set below "key" and its "VALUE" like below
	
	KEY		|	VALUE		
      -------------------------------------------------------------------------------
	Content-Type	|	application/json
      -------------------------------------------------------------------------------
	Accept		|	application/json
      -------------------------------------------------------------------------------
     	Cookie		|	token={{Token}}


//////How to Check Inner Response /////////////////////////

	var jsonData = pm.response.json()                                            // pm = postman
	pm.environment.set("CustomerId", jsonData.bookingid)

	pm.test("Status code is 200", function(){
	     pm.response.to.have.status(200);
	});
	
	pm.test("Check First Name", function(){
	     pm.expect(jsonData.booking.firstname).to.eql("Mohoshin");
	});

    
   //Output

	Pass  :   Status code is 200
	Pass  :   Check First Name


//////How to Generate Report /////////////////////////

1. First install Node.js
2. Install newman by "cmd"

	npm install -g newman

3. run collection of your postman

	newman run SQAStudy.postman_collection.json

4. run collection of your postman with environment variable

	newman run SQAStudy.postman_collection.json -e SQAStudyEnvironment.postman_environment.json
	


//////How to Generate HTML Report /////////////////////////

1. Export Postman collection file
---------------------------------
Click on the three (...) dot beside the "collection name" ---> click on "Export" and save it in "d:/api-test" folder

2. Generate Report
--------------------------------
a. Go to "d:/api-test" folder
b. Open command prompt "cmd"
c. type
	newman run your-export-file-name -r htmlextra

   
	
